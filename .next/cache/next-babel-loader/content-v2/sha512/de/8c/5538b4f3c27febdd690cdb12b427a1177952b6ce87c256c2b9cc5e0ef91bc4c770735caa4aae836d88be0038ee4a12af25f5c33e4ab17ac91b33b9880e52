{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport { useRouter } from 'next/router';\nvar axiosInstance = axios.create({\n  baseURL: 'https://dev.api.portoapp.id'\n});\naxiosInstance.interceptors.request.use(function (config) {\n  var token = Cookies.get(\"access_token\");\n\n  if (token) {\n    config.headers['Authorization'] = 'Bearer ' + token;\n  } // config.headers['Content-Type'] = 'application/json';\n\n\n  return config;\n}, function (error) {\n  Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function (response) {\n  return response;\n}, _s(function (error) {\n  _s();\n\n  var originalRequest = error.config;\n  var router = useRouter();\n\n  if (error.response.status === 401 && originalRequest.url === 'https://dev.api.portoapp.id/api/internal/auth/refresh') {\n    router.push('/login');\n    return Promise.reject(error);\n  }\n\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    var refreshToken = Cookies.get(\"refresh_token\");\n    return axios.post('/api/internal/auth/refresh', {\n      \"refresh_token\": refreshToken\n    }).then(function (res) {\n      if (res.status === 201) {\n        Cookies.set(\"access_token\", res.data.accessToken);\n        Cookies.set(\"refresh_token\", res.data.refreshToken);\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + Cookies.get(\"access_token\");\n        return axios(originalRequest);\n      }\n    });\n  }\n\n  return Promise.reject(error);\n}, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n}));\nexport default axiosInstance;","map":{"version":3,"sources":["/Users/Base/Documents/cms-new-jic/axios/axios.js"],"names":["axios","Cookies","useRouter","axiosInstance","create","baseURL","interceptors","request","use","config","token","get","headers","error","Promise","reject","response","originalRequest","router","status","url","push","_retry","refreshToken","post","then","res","set","data","accessToken","defaults","common"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,IAAMC,aAAa,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAE;AADsB,CAAb,CAAtB;AAIAF,aAAa,CAACG,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CACI,UAAAC,MAAM,EAAI;AACN,MAAMC,KAAK,GAAGT,OAAO,CAACU,GAAR,CAAY,cAAZ,CAAd;;AACA,MAAID,KAAJ,EAAW;AACPD,IAAAA,MAAM,CAACG,OAAP,CAAe,eAAf,IAAkC,YAAYF,KAA9C;AACH,GAJK,CAKN;;;AACA,SAAOD,MAAP;AACH,CARL,EASI,UAAAI,KAAK,EAAI;AACLC,EAAAA,OAAO,CAACC,MAAR,CAAeF,KAAf;AACH,CAXL;AAaAV,aAAa,CAACG,YAAd,CAA2BU,QAA3B,CAAoCR,GAApC,CAAwC,UAACQ,QAAD,EAAc;AAClD,SAAOA,QAAP;AACH,CAFD,KAEG,UAAUH,KAAV,EAAiB;AAAA;;AAChB,MAAMI,eAAe,GAAGJ,KAAK,CAACJ,MAA9B;AACA,MAAMS,MAAM,GAAGhB,SAAS,EAAxB;;AACA,MAAIW,KAAK,CAACG,QAAN,CAAeG,MAAf,KAA0B,GAA1B,IAAiCF,eAAe,CAACG,GAAhB,KACjC,uDADJ,EAC6D;AACzDF,IAAAA,MAAM,CAACG,IAAP,CAAY,QAAZ;AACA,WAAOP,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH;;AAED,MAAIA,KAAK,CAACG,QAAN,CAAeG,MAAf,KAA0B,GAA1B,IAAiC,CAACF,eAAe,CAACK,MAAtD,EAA8D;AAE1DL,IAAAA,eAAe,CAACK,MAAhB,GAAyB,IAAzB;AACA,QAAMC,YAAY,GAAGtB,OAAO,CAACU,GAAR,CAAY,eAAZ,CAArB;AACA,WAAOX,KAAK,CAACwB,IAAN,CAAW,4BAAX,EACH;AACI,uBAAiBD;AADrB,KADG,EAIFE,IAJE,CAIG,UAAAC,GAAG,EAAI;AACT,UAAIA,GAAG,CAACP,MAAJ,KAAe,GAAnB,EAAwB;AACpBlB,QAAAA,OAAO,CAAC0B,GAAR,CAAY,cAAZ,EAA4BD,GAAG,CAACE,IAAJ,CAASC,WAArC;AACA5B,QAAAA,OAAO,CAAC0B,GAAR,CAAY,eAAZ,EAA6BD,GAAG,CAACE,IAAJ,CAASL,YAAtC;AACAvB,QAAAA,KAAK,CAAC8B,QAAN,CAAelB,OAAf,CAAuBmB,MAAvB,CAA8B,eAA9B,IAAiD,YAAY9B,OAAO,CAACU,GAAR,CAAY,cAAZ,CAA7D;AACA,eAAOX,KAAK,CAACiB,eAAD,CAAZ;AACH;AACJ,KAXE,CAAP;AAYH;;AACD,SAAOH,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CA7BD;AAAA,UAImBX,SAJnB;AAAA;AA+BA,eAAeC,aAAf","sourcesContent":["import axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport { useRouter } from 'next/router'\n\nconst axiosInstance = axios.create({\n    baseURL: 'https://dev.api.portoapp.id'\n})\n\naxiosInstance.interceptors.request.use(\n    config => {\n        const token = Cookies.get(\"access_token\");\n        if (token) {\n            config.headers['Authorization'] = 'Bearer ' + token;\n        }\n        // config.headers['Content-Type'] = 'application/json';\n        return config;\n    },\n    error => {\n        Promise.reject(error)\n    });\n\naxiosInstance.interceptors.response.use((response) => {\n    return response\n}, function (error) {\n    const originalRequest = error.config;\n    const router = useRouter()\n    if (error.response.status === 401 && originalRequest.url ===\n        'https://dev.api.portoapp.id/api/internal/auth/refresh') {\n        router.push('/login');\n        return Promise.reject(error);\n    }\n\n    if (error.response.status === 401 && !originalRequest._retry) {\n\n        originalRequest._retry = true;\n        const refreshToken = Cookies.get(\"refresh_token\");\n        return axios.post('/api/internal/auth/refresh',\n            {\n                \"refresh_token\": refreshToken\n            })\n            .then(res => {\n                if (res.status === 201) {\n                    Cookies.set(\"access_token\", res.data.accessToken);\n                    Cookies.set(\"refresh_token\", res.data.refreshToken)\n                    axios.defaults.headers.common['Authorization'] = 'Bearer ' + Cookies.get(\"access_token\");\n                    return axios(originalRequest);\n                }\n            })\n    }\n    return Promise.reject(error);\n});\n\nexport default axiosInstance;"]},"metadata":{},"sourceType":"module"}